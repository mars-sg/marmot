from dataclasses import dataclass
from re import Pattern
from typing import Any, Optional, Protocol, Union

from ..core import Model as Model

MODEL_ID_RE: Pattern

class ModelCreator(Protocol):
    def __call__(self, **kwargs: Any) -> Model: ...

@dataclass
class ModelSpec:
    id: str
    entry_point: Union[ModelCreator, str]
    kwargs: dict = ...
    namespace: Optional[str] = ...
    name: str = ...
    version: Optional[int] = ...
    def __post_init__(self) -> None: ...
    def __init__(self, id, entry_point, kwargs) -> None: ...

registry: dict[str, ModelSpec]
current_namespace: Optional[str]

def parse_model_id(model_id: str) -> tuple[Optional[str], str, Optional[int]]: ...
def get_model_id(ns: Optional[str], name: str, version: Optional[int]) -> str: ...
def find_highest_version(ns: Optional[str], name: str) -> Optional[int]: ...
def load_model_creator(name: str) -> ModelCreator: ...
def get_available_models() -> list[str]: ...
def register(
    id: str, entry_point: Optional[Union[str, ModelCreator]], kwargs: dict = {}
) -> None: ...
def get_categories() -> dict[str, list[int]]: ...
def load(id: Union[str, ModelSpec], **kwargs: Any) -> Model: ...
